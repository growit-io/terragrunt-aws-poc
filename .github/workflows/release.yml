name: 'Release'

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && github.event.created
        uses: actions/checkout@v2
      - name: 'Create initial commit and tag'
        if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && github.event.created
        run: |
          git rm --ignore-unmatch -f CHANGELOG.md version.txt
          git commit --amend -m "chore($(basename $GITHUB_REPOSITORY)): initial commit"
          git push -f
          git tag v0.0.0
          git push --tags
        env:
          GIT_AUTHOR_NAME: ${{ github.actor }}
          GIT_AUTHOR_EMAIL: ${{ github.actor }}@users.noreply.github.com
          GIT_COMMITTER_NAME: ${{ github.actor }}
          GIT_COMMITTER_EMAIL: ${{ github.actor }}@users.noreply.github.com
      # TODO: check if the token has access to this repository and create an issue if not
      - name: 'Dispatch template_generated event'
        if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && github.event.created
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.ACTIONS_BOT_TOKEN }}
          event-type: template_generated
      - name: 'Gather repository information'
        id: repository
        run: echo ::set-output name=name::$(basename $GITHUB_REPOSITORY)
      - name: 'Create release or update pull request'
        id: main
        uses: GoogleCloudPlatform/release-please-action@v2
        with:
          token: ${{ secrets.ACTIONS_BOT_TOKEN }}
          pull-request-title-pattern: 'chore(${{ steps.repository.outputs.name }}${scope}): release${component} ${version}'
          release-type: simple
          changelog-types: |
            [
              {"type":"feat","section":"Features","hidden":false},
              {"type":"fix","section":"Bug Fixes","hidden":false},
              {"type":"perf","section":"Performance Improvements","hidden":false},
              {"type":"refactor","section":"Code Refactoring","hidden":false},
              {"type":"style","section":"Coding Conventions","hidden":true},
              {"type":"build","section":"Build System","hidden":false},
              {"type":"test","section":"Automated Tests","hidden":false},
              {"type":"ci","section":"CI/CD Workflows","hidden":false},
              {"type":"docs","section":"Documentation","hidden":false},
              {"type":"chore","section":"Miscellaneous","hidden":true}
            ]
      - name: 'Dispatch release_created event'
        if: ${{ steps.main.outputs.release_created }}
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.ACTIONS_BOT_TOKEN }}
          event-type: release_created
          client-payload: >-
            {
              "html_url": "${{ steps.main.outputs.html_url }}",
              "tag_name": "${{ steps.main.outputs.tag_name }}"
            }
    outputs:
      release_created: ${{ steps.main.outputs.release_created }}

  development:
    name: 'Development'
    needs: release
    if: '! needs.release.outputs.release_created'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Create and apply execution plans for aws/management/dev'
        uses: ./.github/actions/make
        with:
          aws-access-key-id: ${{ secrets.CD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CD_AWS_SECRET_ACCESS_KEY }}
          directory: aws/management/dev
          pre-goals: init
          goals: apply
        env:
          TERRAGRUNT_FLAGS: --terragrunt-non-interactive
      - name: 'Create and apply execution plans for aws/workloads/dev'
        uses: ./.github/actions/make
        with:
          aws-access-key-id: ${{ secrets.CD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CD_AWS_SECRET_ACCESS_KEY }}
          directory: aws/workloads/dev
          pre-goals: init
          goals: apply
        env:
          TERRAGRUNT_FLAGS: --terragrunt-non-interactive

  testing:
    name: 'Testing'
    needs: release
    if: '! needs.release.outputs.release_created'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Create and apply execution plans for aws/management/test'
        uses: ./.github/actions/make
        with:
          aws-access-key-id: ${{ secrets.CD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CD_AWS_SECRET_ACCESS_KEY }}
          directory: aws/management/test
          pre-goals: init
          goals: apply
        env:
          TERRAGRUNT_FLAGS: --terragrunt-non-interactive
      - name: 'Create and apply execution plans for aws/workloads/test'
        uses: ./.github/actions/make
        with:
          aws-access-key-id: ${{ secrets.CD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CD_AWS_SECRET_ACCESS_KEY }}
          directory: aws/workloads/test
          pre-goals: init
          goals: apply
        env:
          TERRAGRUNT_FLAGS: --terragrunt-non-interactive

  production:
    name: 'Production'
    needs: release
    if: needs.release.outputs.release_created
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Create and apply execution plans for aws/management/boot'
        uses: ./.github/actions/make
        with:
          aws-access-key-id: ${{ secrets.CD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CD_AWS_SECRET_ACCESS_KEY }}
          directory: aws/management/boot
          pre-goals: init
          goals: apply
        env:
          TERRAGRUNT_FLAGS: --terragrunt-non-interactive
      - name: 'Create and apply execution plans for aws/management/prod'
        uses: ./.github/actions/make
        with:
          aws-access-key-id: ${{ secrets.CD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CD_AWS_SECRET_ACCESS_KEY }}
          directory: aws/management/prod
          pre-goals: init
          goals: apply
        env:
          TERRAGRUNT_FLAGS: --terragrunt-non-interactive
      - name: 'Create and apply execution plans for aws/workloads/prod'
        uses: ./.github/actions/make
        with:
          aws-access-key-id: ${{ secrets.CD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CD_AWS_SECRET_ACCESS_KEY }}
          directory: aws/workloads/prod
          pre-goals: init
          goals: apply
        env:
          TERRAGRUNT_FLAGS: --terragrunt-non-interactive
