name: 'Integration'

on:
  pull_request:
    branches:
      - main

jobs:
  commitlint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - id: merge-base
        run: |
          # Detect merge commit with unrelated histories
          head_ref=$(git rev-parse ${{ github.event.pull_request.head.sha }})
          commit=$(git cat-file -p $head_ref)
          unrelated_histories=false

          if [[ $(grep -c '^parent ' <<<"$commit") -gt 1 ]]; then
            parents=$(awk '/^parent / {print $2}' <<<"$commit")

            if ! git merge-base --is-ancestor $(echo $parents); then
              unrelated_histories=true
            fi
          fi

          echo ::set-output name=unrelated-histories::$unrelated_histories
      - # https://github.com/wagoid/commitlint-github-action
        # The commitlint action does not handle unrelated histories and fails,
        # so we detect this condition and skip the step, only in that case.
        if: steps.merge-base.outputs.unrelated-histories == 'false'
        uses: wagoid/commitlint-github-action@v4
        with:
          configFile: commitlint.config.js
          firstParent: false
          failOnWarnings: true
          helpURL: 'https://github.com/conventional-changelog/commitlint/#what-is-commitlint'

  development:
    name: 'Development'
    if: ${{ ! startsWith(github.head_ref, 'release-v') }}
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Create execution plans'
        id: plan
        uses: ./.github/actions/terragrunt
        with:
          command: plan
          config-paths: '*/workloads/dev'
          aws-access-key-id: ${{ secrets.CI_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CI_AWS_SECRET_ACCESS_KEY }}
    outputs:
      changed-paths: ${{ steps.plan.outputs.changed-paths }}

  production:
    name: 'Production'
    if: startsWith(github.head_ref, 'release-v')
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Create execution plans'
        id: plan
        uses: ./.github/actions/terragrunt
        with:
          command: plan
          config-paths: '*/boot */management/dev */prod'
          aws-access-key-id: ${{ secrets.CD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CD_AWS_SECRET_ACCESS_KEY }}
    outputs:
      changed-paths: ${{ steps.plan.outputs.changed-paths }}

  feedback:
    name: 'Feedback'
    needs: [development, production]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Generate feedback'
        id: feedback
        uses: ./.github/actions/feedback
        with:
          needs: ${{ toJSON(needs) }}
